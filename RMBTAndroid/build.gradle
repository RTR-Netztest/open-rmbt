apply plugin: 'com.android.application'

repositories {
	maven {
		url 'https://maven.google.com'
	}
	mavenCentral()
	jcenter()
}


subprojects{
    evaluationDependsOn(':RMBTClient')
}

dependencies {
	implementation (project(':RMBTClient')) {
		exclude group: 'org.apache.httpcomponents', module: 'httpclient'
		exclude group: 'org.json', module: 'json'
        exclude group: 'com.github.jknack', module: 'handlebars'
    }
	implementation (project(':RMBTUtil')) {
		exclude group: 'org.json', module: 'json'
    }
	//RMBTAndroid also depends on RMTBSharedCode via the RMBTClient dependency
	implementation group: 'junit', name: 'junit', version: '4.12'
	implementation 'com.google.android.gms:play-services-maps:16.1.0'
	implementation 'dnsjava:dnsjava:2.1.8'
	implementation 'net.sf.jopt-simple:jopt-simple:5.0.4'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.3'
	// fix dex overflow
	// see https://stackoverflow.com/questions/38714651/android-studio-dexindexoverflowexception-method-id-not-in
	implementation 'com.android.support:multidex:1.0.3'

    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:28.0.0'
}

def signDebugApp = true

// soure: https://developer.android.com/studio/publish/app-signing.html
// Create a variable called keystorePropertiesFile, and initialize the
// keystore.properties file in the RMBTAndroid folder.
// the keystore.properties files is excluded from the git repository
// for security reasons.
/* Demo file: (Path: [project root]/private/keystore.properties
storeFile=netztest.keystore
storePassword=<PASSWORD>
keyAlias=rtr
keyPassword=<PASSWORD>
*/
def keystorePropertiesFile = rootProject.file("private/keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// Other keys
def appSecretPropertiesFile = rootProject.file("private/appSecrets.properties")
def appSecretProperties = new Properties()
appSecretProperties.load(new FileInputStream(appSecretPropertiesFile))

android {
    compileSdkVersion 29

	useLibrary  'org.apache.http.legacy'
//  obsolete since Android studio 3.0.0
//  buildToolsVersion '27.0.3'

	sourceSets {
	    main {
            java {
                srcDirs = ['src']
                exclude 'at/rtr/rmbt/client/applet/RMBTApplet.java'
            }
	        manifest {
	            srcFile 'AndroidManifest.xml'
	        }
	        res {
	            srcDir 'res'
	        }
	        assets {
	            srcDir 'assets'
	        }
	    }

		debug {
			res.srcDirs = ['../private/RMBTAndroid/res']
		}

		release {
			res.srcDirs = ['../private/RMBTAndroid/res']
		}
	}

    defaultConfig {
        applicationId "at.alladin.rmbt.android"
		manifestPlaceholders = [googleMapsApiKey:appSecretProperties['googleMapsApiKey']]
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 30704
        versionName "3.7.4"
        buildConfigField "long", "BUILD_TIMESTAMP", System.currentTimeMillis() + "L"
		buildConfigField "int", "LOOP_MODE_UNLOCK_CODE",appSecretProperties['loopModeUnlockCode']
		buildConfigField "int", "LOOP_MODE_LOCK_CODE",appSecretProperties['loopModeLockCode']
		buildConfigField "int", "SERVER_SELECTION_UNLOCK_CODE",appSecretProperties['serverSelectionUnlockCode']
		buildConfigField "int", "SERVER_SELECTION_LOCK_CODE",appSecretProperties['serverSelectionLockCode']
		buildConfigField "int", "DEVELOPER_UNLOCK_CODE",appSecretProperties['developerUnlockCode']
		buildConfigField "int", "DEVELOPER_LOCK_CODE",appSecretProperties['developerLockCode']

		// Enabling multidex support.
		multiDexEnabled true
    }

	lintOptions {
           abortOnError false
    }



    buildTypes {
        debug {
        	debuggable true
            minifyEnabled false

        }
		release {

		    signingConfigs {
        		config {
            			keyAlias keystoreProperties['keyAlias']
            			keyPassword keystoreProperties['keyPassword']
            			storeFile file(keystoreProperties['storeFile'])
            			storePassword keystoreProperties['storePassword']
        			}
    			}


			debuggable false
			minifyEnabled false

			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

			lintOptions {
				//disable 'MissingTranslation'
				//disable 'ExtraTranslation'
			}
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
					def outputFile = output.outputFile
					if (outputFile != null && outputFile.name.endsWith('.apk')) {
						def finalName = versionCode + "-" + System.currentTimeMillis().toString() + "-" + getVersionNameFromGit() + ".apk"
						if (getDirtyFromGit() == "true")
							finalName = "dirty-" + finalName
						outputFileName = finalName
					}
                }
            }
		}
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_7
		targetCompatibility JavaVersion.VERSION_1_7
	}

	packagingOptions {
		exclude 'META-INF/LICENSE.txt'
		exclude 'META-INF/NOTICE.txt'
		exclude 'META-INF/LICENSE'
		exclude 'META-INF/NOTICE'
	}
}

